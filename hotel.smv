MODULE quarto(idQuarto_)
	
	VAR	
		status : {desocupado, ocupado};
		-- Contador para o numero de compras realizadas.
		compras : 0..10;
        idQuarto : 0..2;
		-- Flag para informar se o quarto possui multa no ato de liberarQuarto.
		multa_ativa : boolean;
		-- Flag para informar se o quarto foi aberto com sucesso pelo cartao.
		aberto : boolean;
		
	ASSIGN
        init(idQuarto) := idQuarto_; 
		init(status) := desocupado;
		init(compras) := 0;
		init(multa_ativa) := FALSE;
		init(aberto) := FALSE;
		
		next(idQuarto) := idQuarto;
		
MODULE cartao(quarto_card)

	VAR
		status : {disponivel, em_uso};
        quartoId : 0..2;
    
	ASSIGN
		init(status) := disponivel;
        init(quartoId) := quarto_card;
		
MODULE hotel(hotel_action, objetoAcao)

	VAR
		-- Quartos:
        quarto1 : quarto(0);
		quarto2 : quarto(1);

        -- Cartoes - inicia com valores absurdos (nao possui um quarto real ligado a ele).
        cartao1 : cartao(2);
        cartao2 : cartao(2);
        cartao3 : cartao(2);
        cartao4 : cartao(2);
        cartao5 : cartao(2);
        cartao6 : cartao(2);
	
    ASSIGN
		-- Quarto1:
		-- Operacao de resevar quarto com os cartoes 1,2,3 e fazer a entrega individual dos mesmos.
		next(cartao1.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q1 : em_uso;
				hotel_action = entregarCartao & objetoAcao = c1 & cartao1.status = em_uso : disponivel;
				TRUE : cartao1.status;
			esac;

		-- Coloca o id do quarto no cartao, ou entao poe um id absurdo quando liberar o quarto
		next(cartao1.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q1 & cartao1.quartoId = 2 : 0;
				hotel_action = liberarQuarto & objetoAcao = q1 & cartao1.quartoId = 0 : 2;
				TRUE : cartao1.quartoId;
			esac;
			
		next(cartao2.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q1 : em_uso;
				hotel_action = liberarQuarto & objetoAcao = c2 & cartao2.status = em_uso : disponivel;
				TRUE : cartao2.status;
			esac;

		next(cartao2.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q1 & cartao2.quartoId = 2 : 0;
				hotel_action = liberarQuarto & objetoAcao = q1 & cartao2.quartoId = 0 : 2;
				TRUE : cartao2.quartoId;
			esac;

		next(cartao3.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q1 : em_uso;
				hotel_action = liberarQuarto & objetoAcao = c3 & cartao3.status = em_uso : disponivel;
				TRUE : cartao3.status;
			esac;

		next(cartao3.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q1 & cartao3.quartoId = 2 : 0;
				hotel_action = liberarQuarto & objetoAcao = q1 & cartao3.quartoId = 0 : 2;
				TRUE : cartao3.quartoId;
			esac;

		-- ocupa ou desocupa um quarto
		next (quarto1.status) :=
            -- Caso em que a acao do hotel eh reservarQuarto e o quarto desejado eh o quarto 1.
            case
                hotel_action = reservarQuarto & objetoAcao = q1 & quarto1.status = desocupado : ocupado;
                hotel_action = liberarQuarto & objetoAcao = q1 & quarto1.status = ocupado : desocupado;
                TRUE: quarto1.status;
            esac;

		-- Verifica se todos os cartoes foram entregues antes de devolver o quarto, caso contrario ativa a flag multa.
		next (quarto1.multa_ativa) := 
			case
				hotel_action = liberarQuarto & objetoAcao = q1 & (cartao1.status = em_uso | cartao2.status = em_uso | cartao3.status = em_uso) : TRUE;
				hotel_action = reservarQuarto & objetoAcao = q1 : FALSE;
				TRUE : quarto1.multa_ativa;
			esac;

		-- Incrementa compra em quarto1 caso os cartoes sejam validos e o quarto esteja em uso.
        next (quarto1.compras) :=
            case
                hotel_action = creditarCompra & ((objetoAcao = c2 & cartao2.quartoId = quarto1.idQuarto) | (objetoAcao = c1 & cartao1.quartoId = quarto1.idQuarto) |
				(objetoAcao = c3 & cartao3.quartoId = quarto1.idQuarto)) & quarto1.compras < 10 & quarto1.status = ocupado : (quarto1.compras + 1);
				hotel_action = liberarQuarto & objetoAcao = q1 & quarto1.status = ocupado : 0;
                TRUE : quarto1.compras;
            esac;

		-- Verificacao da abertura do quarto com os cartoes validos.
		next (quarto1.aberto) :=
			case
				hotel_action = destrancarQuarto1 & quarto1.status = ocupado & ((objetoAcao = c1 & cartao1.status = em_uso) | (objetoAcao = c2 & cartao2.status = em_uso) | 
				(objetoAcao = c3 & cartao3.status = em_uso)) : TRUE;
				TRUE : FALSE;
			esac;
		-- endQuarto1
		
		-- Quarto2:
		-- Operacao de resevar e entregar quarto com os cartoes 4,5,6 e fazer a entrega individual de cada cartao.
		next(cartao4.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q2 : em_uso;
				hotel_action = entregarCartao & objetoAcao = c4 & cartao4.status = em_uso : disponivel;
				TRUE : cartao4.status;
			esac;

		next(cartao4.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q2 & cartao4.quartoId = 2 : 1;
				hotel_action = liberarQuarto & objetoAcao = q2 & cartao4.quartoId = 1 : 2;
				TRUE : cartao4.quartoId;
			esac;
			
		next(cartao5.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q2 : em_uso;
				hotel_action = entregarCartao & objetoAcao = c5 & cartao5.status = em_uso : disponivel;
				TRUE : cartao5.status;
			esac;

		next(cartao5.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q2 & cartao5.quartoId = 2 : 1;
				hotel_action = liberarQuarto & objetoAcao = q2 & cartao5.quartoId = 1 : 2;
				TRUE : cartao5.quartoId;
			esac;

		next(cartao6.status) := 
			case
				hotel_action = reservarQuarto & objetoAcao = q2 : em_uso;
				hotel_action = entregarCartao & objetoAcao = c6 & cartao6.status = em_uso : disponivel;
				TRUE : cartao6.status;
			esac;

		next(cartao6.quartoId) :=
			case
				hotel_action = reservarQuarto & objetoAcao = q2 & cartao6.quartoId = 2 : 1;
				hotel_action = liberarQuarto & objetoAcao = q2 & cartao6.quartoId = 1 : 2;
				TRUE : cartao6.quartoId;
			esac;

		next (quarto2.status) :=
            -- Caso em que a acao do hotel eh reservarQuarto e o quarto desejado eh o quarto 1.
            case
                hotel_action = reservarQuarto & objetoAcao = q2 & quarto2.status = desocupado : ocupado;
                hotel_action = liberarQuarto & objetoAcao = q2 & quarto2.status = ocupado : desocupado;
                TRUE: quarto2.status;
            esac;

		-- Verifica se todos os cartoes foram entregues antes de devolver o quarto, caso contrario ativa a flag multa.
		next (quarto2.multa_ativa) := 
			case
				hotel_action = liberarQuarto & objetoAcao = q2 & (cartao4.status = em_uso | cartao5.status = em_uso | cartao6.status = em_uso) : TRUE;
				hotel_action = reservarQuarto & objetoAcao = q2 : FALSE;
				TRUE : quarto2.multa_ativa;
			esac;

		-- Incrementa compra em quarto1 caso os cartoes sejam validos e o quarto esteja em uso.
        next (quarto2.compras) :=
            case
                hotel_action = creditarCompra & ((objetoAcao = c4 & cartao4.quartoId = quarto2.idQuarto) | (objetoAcao = c5 & cartao5.quartoId = quarto2.idQuarto) |
				(objetoAcao = c6 & cartao6.quartoId = quarto2.idQuarto))& quarto2.compras < 10 & quarto2.status = ocupado : (quarto2.compras + 1);
				hotel_action = liberarQuarto & objetoAcao = q2 & quarto2.status = ocupado : 0;
                TRUE : quarto2.compras;
            esac;

		-- Verificacao da abertura do quarto com os cartoes validos.
		next (quarto2.aberto) :=
			case
				hotel_action = destrancarQuarto2 & quarto2.status = ocupado & ((objetoAcao = c4 & cartao4.status = em_uso) | (objetoAcao = c5 & cartao5.status = em_uso) | 
				(objetoAcao = c6 & cartao6.status = em_uso)) : TRUE;
				TRUE : FALSE;
			esac;
		--endQuarto2
		
MODULE main
    VAR
        -- Acoes de um hotel:
        hotel_action : {reservarQuarto, creditarCompra, liberarQuarto, entregarCartao, destrancarQuarto1, destrancarQuarto2};
		
        -- Objetos que um hotel pode usar em suas acoes (q = quarto; c = cartao):
        objetoAcao : {q1, q2, c1, c2, c3, c4, c5, c6};
		
		
        hotel : process hotel(hotel_action, objetoAcao);
		
		-- Checagens de LTL:
		
		-- Status de quarto:
		-- Globalmente e verdade dizer que se um quarto esta ocupado e as operacoes forem corretas, entÃ£o o seu proximo estado sera de disponivel.
		LTLSPEC G ((hotel.quarto2.status = ocupado & hotel_action = liberarQuarto & objetoAcao = q2 & _process_selector_ = hotel) -> X (hotel.quarto2.status = desocupado))
		
        -- De modo analogo, quando o quarto estiver desocupado e as operacoes forem corretas, entao o seu proximo estado sera ocupado.
		LTLSPEC G ((hotel.quarto1.status = desocupado & hotel_action = reservarQuarto & objetoAcao = q1 & _process_selector_ = hotel) -> X (hotel.quarto1.status = ocupado))
		
		-- Status de cartao:
        -- Ao reservar um quarto, o status dos cartoes referentes a ele passam a ser em_uso.
		LTLSPEC G ((hotel.cartao1.status = disponivel & hotel_action = reservarQuarto & objetoAcao = q1 & _process_selector_ = hotel) -> X (hotel.cartao1.status = em_uso))
		
		-- Teste de invalidade:
        -- Ao tentar abrir a porta de um quarto, verifica se o cartao usado estah relacionado a esse quarto.
		LTLSPEC G ((hotel_action = destrancarQuarto1 & (objetoAcao = c4 | objetoAcao = c5 | objetoAcao = c6) & _process_selector_ = hotel ) -> X (hotel.quarto1.aberto = FALSE)) 
		
		-- Status de compras:
        -- Apos efetuar uma compra com um cartao, verifica se esta compra foi adicionada
        -- no quarto relacionado ao cartao.
		LTLSPEC G ((hotel_action = creditarCompra & (objetoAcao = c1 | objetoAcao = c2 | objetoAcao = c3) & hotel.quarto1.status = ocupado & _process_selector_ = hotel) -> X (hotel.quarto1.compras > 0))
		
        -- Verifica se quando um quarto eh reservado por um cliente o seu numero de 
        -- compras eh iniciado com 0.
        LTLSPEC G ((hotel_action = liberarQuarto & objetoAcao = q1 & hotel.quarto1.status = ocupado & _process_selector_ = hotel) -> X (hotel.quarto1.compras = 0))
		
		-- Multa:
        -- Verifica se ao tentar entregar um quarto que nao teve todos os cartoes relacionados
        -- a ele entregues anteriormente, eh adicionada uma multa neste quarto.
        LTLSPEC G((hotel_action = liberarQuarto & objetoAcao = q1 & (hotel.cartao1.status = em_uso | hotel.cartao2.status = em_uso | hotel.cartao3.status = em_uso) & _process_selector_ = hotel) -> X (hotel.quarto1.multa_ativa = TRUE))
		LTLSPEC G((hotel_action = liberarQuarto & objetoAcao = q2 & (hotel.cartao4.status = em_uso | hotel.cartao5.status = em_uso | hotel.cartao6.status = em_uso) & _process_selector_ = hotel) -> X (hotel.quarto2.multa_ativa = TRUE))
		
		
FAIRNESS
	running;
