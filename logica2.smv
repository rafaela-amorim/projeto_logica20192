MODULE quarto(idQuarto_)
	
	VAR	
		status : {disponivel, ocupado};
		compras : 0..10;
        idQuarto : 0..1;
		
	ASSIGN
        init(idQuarto) := idQuarto_; 
		init(status) := disponivel;
		init(compras) := 0;

        next(idQuarto) := idQuarto;
			

MODULE cartao(quarto_card)
	VAR
		status : {disponivel, em_uso};
        quartoId : 0..1;
    
	ASSIGN
		init(status) := disponivel;
        init(quartoId) := quarto_card;
		
MODULE hotel(hotel_action, objetoAcao)
	VAR
		-- Quartos
        quarto1 : quarto(0);
		--quarto2 : quarto();

        -- Cartoes
        cartao1 : cartao(0);
        --cartao2 : cartao();
        --cartao3 : cartao();
        --cartao4 : cartao();
        --cartao5 : cartao(quarto());
        --cartao6 : cartao(quarto());
	
    ASSIGN

		next (quarto1.status) :=
            -- Caso em que a acao do hotel eh reservarQuarto e oquarto desejado eh o
            -- quarto 1.
            case
                hotel_action = reservarQuarto & objetoAcao = q1 & quarto1.status = disponivel : ocupado;
                TRUE: disponivel;
            esac;
        
        next (quarto1.compras) :=
            -- Caso em que a acao do hotel eh creditarCompra, e o cartao usado se refere
            -- quarto 1.
            case
                hotel_action = creditarCompra & objetoAcao = c1 & cartao1.quartoId = 
                quarto1.idQuarto & quarto1.compras < 10 : (quarto1.compras + 1);
                TRUE : quarto1.compras;
            esac;
		
		
MODULE main
    VAR
        -- Acoes de um hotel.
        hotel_action : {reservarQuarto, creditarCompra};
        -- Objetos que um hotel pode usar em suas acoes.
        objetoAcao : {q1, c1};

        hotel : process hotel(hotel_action, objetoAcao);